package com.ut.loans.express.processing.services;

import java.net.URI;
import java.sql.Time;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.print.attribute.standard.DateTimeAtCompleted;

import com.ut.loans.express.processing.dto.request.JsonFile;
import com.ut.loans.express.processing.model.ActiveStatus;
import com.ut.loans.express.processing.model.ApprovedLoans;
import com.ut.loans.express.processing.model.DisbursedLoans;
import com.ut.loans.express.processing.model.EscrowAccountHistory;
import com.ut.loans.express.processing.model.InvestorBanks;
import com.ut.loans.express.processing.model.InvestorFundedLoans;
import com.ut.loans.express.processing.model.InvestorVAPayment;
import com.ut.loans.express.processing.model.Investors;
import com.ut.loans.express.processing.model.LoanStatus;
import com.ut.loans.express.processing.model.PaymentStatus;
import com.ut.loans.express.processing.model.TransactionTypes;
import com.ut.loans.express.processing.model.UTEscrowAccounts;
import com.ut.loans.express.processing.repositories.IGenericDao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.configurationprocessor.json.JSONObject;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;
import org.springframework.web.client.RestTemplate;

import io.micrometer.core.instrument.util.TimeUtils;

@Service
public class ApprovedLoansServices {

    IGenericDao<InvestorFundedLoans> investorFundedLoansDAO;
    IGenericDao<ApprovedLoans> approvedLoanDAO;
    IGenericDao<Investors> investorsDAO;
    IGenericDao<InvestorBanks> investorBanksDAO;
    IGenericDao<InvestorVAPayment> investorVAPaymentDAO;
    IGenericDao<DisbursedLoans> disbursedLoanDAO;
    IGenericDao<UTEscrowAccounts> utescrowAccountDAO;
    IGenericDao<EscrowAccountHistory> escrowAccountHistoryDAO;
    TemporaryService temp = new TemporaryService();
    @Autowired
    public void setUTEscrowAccountDAO(final IGenericDao<UTEscrowAccounts> utescrowAccountDAO){
        this.utescrowAccountDAO=utescrowAccountDAO;
        this.utescrowAccountDAO.setClazz(UTEscrowAccounts.class);
    }
    
    @Autowired
    public void setEscrowAccountHistory(final IGenericDao<EscrowAccountHistory> escrowAccountHistoryDAO){
        this.escrowAccountHistoryDAO=escrowAccountHistoryDAO;
        this.escrowAccountHistoryDAO.setClazz(EscrowAccountHistory.class);
    }

    
    @Autowired
    public void setInvestorBanksDAO(IGenericDao<InvestorBanks> investorBanksDAO){
        this.investorBanksDAO=investorBanksDAO;
        this.investorBanksDAO.setClazz(InvestorBanks.class);
    }

    @Autowired
    public void setInvestorVAPaymentDAO(IGenericDao<InvestorVAPayment> investorVAPaymentDAO){
        this.investorVAPaymentDAO=investorVAPaymentDAO;
        this.investorVAPaymentDAO.setClazz(InvestorVAPayment.class);
    }

    @Autowired
    public void setDisbursedLoanDAO(IGenericDao<DisbursedLoans> disbursedLoanDAO){
        this.disbursedLoanDAO=disbursedLoanDAO;
        this.disbursedLoanDAO.setClazz(DisbursedLoans.class);
    }

    @Autowired
    public void setApprovedLoanDAO(IGenericDao<ApprovedLoans> approvedLoanDAO){
        this.approvedLoanDAO=approvedLoanDAO;
        this.approvedLoanDAO.setClazz(ApprovedLoans.class);
    }

    @Autowired
    public void setInvestorFundedLoansDAO(IGenericDao<InvestorFundedLoans> investorFundedLoansDAO){
        this.investorFundedLoansDAO=investorFundedLoansDAO;
        this.investorFundedLoansDAO.setClazz(InvestorFundedLoans.class);
    }

    @Autowired
    public void setInvestorsDAO(IGenericDao<Investors> investorsDAO){
        this.investorsDAO=investorsDAO;
        this.investorsDAO.setClazz(Investors.class);
    }

    @Scheduled(cron = "0 */1 * * * *")
    public void groupLoansGenarateVA(){
        System.out.println("cron job Started !!!");
        List<Investors> investors=investorsDAO.findValueByColumn("activeStatus", "Active");
        if(investors.isEmpty()){
            System.out.println("No Investors are in Active");
        }else{
            System.out.println("Investors Fetched!!");
            for (Investors investor : investors) {
                int investorID = investor.getInvestorID();
                System.out.println("FOR INVESTOR"+investorID+"::::");
                List<InvestorVAPayment> loans=investorVAPaymentDAO.findValueByTwoColumns("loanStatus", "AgreementAccepted", "investorID", String.valueOf(investorID));
                if(loans.isEmpty()){
                    System.out.println("No Loans are Active with AgreemntAccepted Status for Investor:"+investorID);
                }else{
                    Double totalLoanAmount=this.calculateLoanAmount(loans);
                    System.out.println("total amount calculated !!!"+totalLoanAmount);
                    int vaID = temp.generateVANumber();    
                    System.out.println("VA number generated !!!"+vaID);
                    for (InvestorVAPayment vaUpdate : loans) {
                        vaUpdate.setVaID(vaID);
                        vaUpdate.setVaAmount(totalLoanAmount);
                        vaUpdate.setVaStatus(PaymentStatus.Initiated);
                        investorVAPaymentDAO.update(vaUpdate);
                    }
                    System.out.println("records updated with VA number");
                    String investorAccountNo = investorBanksDAO.findValueByTwoColumns("investorID", String.valueOf(investorID), "activeStatus", "Active").get(0).getAccountNumber(); 
                    String paymentVAStatus = requestBankAPIPaymentService(investorAccountNo, vaID, totalLoanAmount);
                    System.out.println("Bank API called successfully and returned status:::"+paymentVAStatus);
                    if(paymentVAStatus.equals("Success")){
                        for (InvestorVAPayment vaUpdate : loans) {
                            vaUpdate.setVaStatus(PaymentStatus.Success);
                            vaUpdate.setVaComments(paymentVAStatus);
                            vaUpdate.setLoanStatus(LoanStatus.VAPaymentSuccess);
                            investorVAPaymentDAO.update(vaUpdate);
                            System.out.println("Payment Success Details Updated");
                        }
                        
                        investor.setAvailableAmount(investor.getAvailableAmount()-totalLoanAmount);
                        investor.setDisbursedLoans(investor.getDisbursedLoans()+loans.size());
                        investor.setOutstandingAmount(investor.getOutstandingAmount()+totalLoanAmount+this.calculateInvestorInterestAmount(loans));
                        investorsDAO.update(investor);    
                        System.out.println("Investor Details updated");
                        UTEscrowAccounts utaccount=utescrowAccountDAO.findValueByColumn("activeStatus", "Active").get(0);
                        utaccount.setPresentAmount(utaccount.getPresentAmount()+totalLoanAmount);
                        utescrowAccountDAO.update(utaccount);
                        System.out.println("UTaccount amount Details updated");
                        EscrowAccountHistory history=new EscrowAccountHistory();
                        history.setAccountNumber(utaccount.getAccountNumber());
                        history.setBeneficiaryAccountNo(String.valueOf(vaID));
                        history.setTransactionAmount(totalLoanAmount);
                        history.setTransactionType(TransactionTypes.Credit);
                        history.setComments("VA Payment Successful");
                        escrowAccountHistoryDAO.save(history);
                        System.out.println("EscrowAccount History record added");
                        for (InvestorVAPayment loan : loans) {
                            history = new EscrowAccountHistory();
                            history.setAccountNumber(utaccount.getAccountNumber());
                            history.setBeneficiaryAccountNo(loan.getApplicationAccountNo());
                            history.setTransactionAmount(loan.getLoanAmount());
                            history.setTransactionType(TransactionTypes.Debit);
                            history.setTransactionStatus(PaymentStatus.Initiated);
                            escrowAccountHistoryDAO.save(history);
                        }
                        System.out.println("Records added into escrow account");
                    }else{
                        System.out.println("Payment Failed !!!");
                        for (InvestorVAPayment vaUpdate : loans) {
                            vaUpdate.setVaStatus(PaymentStatus.Failed);
                            vaUpdate.setVaComments(paymentVAStatus);
                            investorVAPaymentDAO.update(vaUpdate);
                            System.out.println("Payment Failed Details Updated!!");
                        }

                    }
                }        

            }
        }
    }

    public void transferAmountEscrowToApplicant(){
        System.out.println("Escrow Amount transfer Method !!!");
        List<EscrowAccountHistory> paymentList=escrowAccountHistoryDAO.findValueByColumn("transactionStatus", "Initiated");
        UTEscrowAccounts utaccount=utescrowAccountDAO.findValueByColumn("activeStatus", "Active").get(0);
        for (EscrowAccountHistory payment : paymentList) {
            payment.setTransactionID(temp.generateTransactionNumber());
            payment.setTransactionStatus(PaymentStatus.Success);
            escrowAccountHistoryDAO.update(payment);
            utaccount.setPresentAmount(utaccount.getPresentAmount()-payment.getTransactionAmount());
            utescrowAccountDAO.update(utaccount);
        }
    } 

    public Double calculateLoanAmount(List<InvestorVAPayment> loans){
        Double totalLoanAmount=0.0;
        for (InvestorVAPayment loansAmount : loans) {
            totalLoanAmount+=loansAmount.getLoanAmount().doubleValue();
        }
        return totalLoanAmount;
    }

    public Double calculateInvestorInterestAmount(List<InvestorVAPayment> loans){
        Double totalInterestAmount=0.0;
        for (InvestorVAPayment loansAmount : loans) {
            totalInterestAmount+=(loansAmount.getLoanAmount().doubleValue())*0.1;
        }
        return totalInterestAmount;
    }

    public String requestBankAPIPaymentService(String accountNo, int vaID, Double totalAmount){
        String message="Failed";
        final String uri = "http://localhost:9012/express-loan/temp/investorVAPaymentBankAPIRequest";
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.setContentType(MediaType.APPLICATION_JSON);
        httpHeaders.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
        ResponseEntity<String> result = restTemplate.postForEntity(uri, JSONObject.class, String.class, accountNo, vaID, totalAmount);
        System.out.println("API return message :::::"+result);
        message=result.getBody();
        System.out.println("messae::::"+message);
        return message;
    }
}